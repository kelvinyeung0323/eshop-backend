<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<!--https://github.com/damienbeaufils/spring-boot-clean-architecture-demo/blob/master/src/main/resources/db/mappings/dummy.xml-->
<!--<entity-mappings xmlns="http://java.sun.com/xml/ns/persistence/orm" version="2.0">-->
<hibernate-mapping package="com.kelvin.eshop.order.entity" >

    <!-- 参考:https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#identifiers-->
    <class entity-name="com.kelvin.eshop.order.entity.Order" table="user_order">
        <id name="orderNo" column="order_no" length="32" type="string">
            <generator class="com.kelvin.eshopbackend.base.common.idgenerator.OrderGenerator"/>
        </id>
        <property name="userId" column="user_id" length="32" type="string"/>
        <!--    收货人地址-->
        <property name="address" column="address" length="255" type="string"/>
        <!--收货人电话-->
        <property name="phoneNo" column="phone_no" length="16" type="string"/>
        <!--收货人-->
        <property name="consignee" column="consignee" length="64" type="string"/>
        <!--评价状态-->
        <property name="commentStatus" column="comment_status" length="16" type="string"/>
        <!--运送状态-->
        <property name="shipStatus" column="ship_status" length="16" type="string"/>
        <!--支付状态-->
        <property name="payStatus" column="pay_status" length="16" type="string"/>
        <!-- 折扣-->
        <property name="discountAmt" column="discount_amt" length="16" type="string"/>
        <!-- 商品金额-->
        <property name="goodsAmt" column="goods_amt" length="16" type="string"/>
        <!-- 优惠券-->
        <property name="couponAmt" column="coupon_amt" length="16" type="string"/>
        <!-- 支付金额-->
        <property name="payAmt" column="pay_amt" length="16" type="string"/>
        <!-- 运费-->
        <property name="shippingFee" column="shipping_fee" length="16" type="string"/>
        <!--  备注-->
        <property name="remark" column="remark" length="255" type="string"/>
        <!-- 订单详情-->
        <!-- 参考:  https://mkyong.com/hibernate/hibernate-one-to-many-relationship-example/-->
        <set name="orderDetails" lazy="true" table="order_details" inverse="true" fetch="select">
            <key column="order_no" not-null="true"/>
            <one-to-many class="com.kelvin.eshop.order.entity.OrderDetails"/>
        </set>
        <!--创建时间-->
        <property name="createTime" column="create_time" type="timestamp"/>
    </class>


    <class entity-name="com.kelvin.eshop.order.entity.OrderDetails" table="order_details">
        <id name="id" length="32" column="id" type="string">
            <generator class="uuid">
            </generator>
        </id>
        <property name="description" length="1200" type="string"/>
        <property name="image" length="1200" type="string"/>
        <property name="price" length="16" type="string"/>
        <property name="title" length="255" type="string"/>
        <property name="goodsSkuId" length="255" type="string"/>
        <many-to-one name="order" class="com.kelvin.eshop.order.entity.Order" column="order_no" fetch="select" not-null="true"/>
    </class>


    <class entity-name="com.kelvin.eshop.order.entity.CartItem" table="cart">
        <id name="id" column="id" length="32" type="string">
            <generator class="uuid"></generator>
        </id>
        <property name="qty" column="qty" length="32" type="integer"/>
        <property name="goodsSkuId" column="goodsSkuId" length="32" type="integer"/>
        <property name="userId" column="user_id" length="32" type="integer"/>
    </class>

    <!--    “assigned”  主键由外部程序负责生成，在   save()   之前指定一个。-->
    <!--    “hilo”  通过hi/lo   算法实现的主键生成机制，需要额外的数据库表或字段提供高位值来源。-->
    <!--    “seqhilo”   与hilo   类似，通过hi/lo   算法实现的主键生成机制，需要数据库中的   Sequence，适用于支持   Sequence   的数据库，如Oracle。-->
    <!--    “increment”  主键按数值顺序递增。此方式的实现机制为在当前应用实例中维持一个变量，以保存着当前的最大值，之后每次需要生成主键的时候将此值加1作为主键。这种方式可能产生的问题是：不能在集群下使用。-->
    <!--    “identity” 采用数据库提供的主键生成机制。如DB2、SQL   Server、MySQL   中的主键生成机制。-->
    <!--    “sequence”  采用数据库提供的   sequence   机制生成主键。如   Oralce   中的Sequence。-->
    <!--    “native” 由   Hibernate   根据使用的数据库自行判断采用   identity、hilo、sequence   其中一种作为主键生成方式。-->
    <!--    “uuid.hex” 由   Hibernate   基于128   位   UUID   算法   生成16   进制数值（编码后以长度32   的字符串表示）作为主键。-->
    <!--    “uuid.string” 与uuid.hex   类似，只是生成的主键未进行编码（长度16），不能应用在   PostgreSQL   数据库中。-->
    <!--    “foreign”  使用另外一个相关联的对象的标识符作为主键。-->

</hibernate-mapping>